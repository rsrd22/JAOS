/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Vistas;

import BaseDeDatos.gestorMySQL;
import Calendario.VentanaAgenda;
import Calendario.VentanaNulos;
import Control.ControlCitas;
import Modelo.Cita;
import Utilidades.Utilidades;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author AT-DESARROLLO
 */
public class VentanaDiasNulos extends javax.swing.JFrame {
    public String anio;
    public String mes;
    public String id_mes;
    public String dia;
    
    public String SemInianio;
    public String SemInimes;
    public String SemIniid_mes;
    public String SemInidia;
    
    public String SemFinanio;
    public String SemFinid_mes;
    public String SemFinmes;
    public String SemFindia;
    
    public VentanaNulos v;
    public VentanaCitas vcts;
    public String paciente;
    public String npaciente;
    public int bandera = 0;
    public Connection con;
    public gestorMySQL gsql;
    private int x, y;
    
    DefaultTableModel modelo = new DefaultTableModel();
    
    String[] dias = {"Lunes","Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"};    
    String[] Meses = {"Enero","Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
    
    String[] nombreColumnasAux = new String[]{"Hora", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"};
    //String[] nombreColumnas = new String[]{"Hora", "Lu", "Ma", "Mi", "Ju", "Vi", "Sa"};
    String[] nombreColumnas = new String[]{"Hora", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"};
    
    String[] horasTabla = new String[40];
    
    String[] infDiasS = new String[6];
    ControlCitas cita = new ControlCitas();
    ArrayList<Cita> Lista_Calendario = new ArrayList<>();
    
    ArrayList<String[]> ListaCitaAux = new ArrayList<>();
    ArrayList<String[]> ListaNuloAux = new ArrayList<>();  
    
    /**
     * Creates new form VentanaDiasNulos
     */
    public VentanaDiasNulos() {
        initComponents();
        Utilidades.EstablecerIcono(this);
        this.setLocationRelativeTo(null);
        Calendar cal =Calendar.getInstance();
        cal.add(Calendar.WEEK_OF_MONTH, 3);
        SimpleDateFormat sdfa = new SimpleDateFormat("YYYY");
        SimpleDateFormat sdfm = new SimpleDateFormat("MMMM");
        SimpleDateFormat sdfd = new SimpleDateFormat("d");
        this.anio = sdfa.format(cal.getTime());
        this.mes = sdfm.format(cal.getTime());
        this.dia = sdfd.format(cal.getTime());
        id_mes = getIdMes();        
        nombreColumnas = new String[]{"Hora".toUpperCase(), "Lunes".toUpperCase(), "Martes".toUpperCase(), "Miércoles".toUpperCase(), "Jueves".toUpperCase(), "Viernes".toUpperCase(), "Sábado".toUpperCase()};
        GenerarCalendarioxHoras();
    }
    public VentanaDiasNulos(String anio, String mes, String dia) {
        initComponents();
        Utilidades.EstablecerIcono(this);
        this.setLocationRelativeTo(null); 
        this.anio = anio;
        this.mes = mes;
        this.dia = dia;
        id_mes = getIdMes();
        
        //nombreColumnas = new String[]{"Hora", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"};
        nombreColumnas = new String[]{"Hora".toUpperCase(), "Lunes".toUpperCase(), "Martes".toUpperCase(), "Miércoles".toUpperCase(), "Jueves".toUpperCase(), "Viernes".toUpperCase(), "Sábado".toUpperCase()};
        GenerarCalendarioxHoras();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnAnterior = new javax.swing.JButton();
        btnEncabezado = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHorarioSemanalR = new Tabla.AgendaTable(){
            @Override
            public boolean isCellEditable(int rowindex, int colindex){
                return false;
            }

        };//javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dias no Laborales");
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(26, 82, 118)));
        jPanel1.setPreferredSize(new java.awt.Dimension(774, 598));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAnterior.setBackground(new java.awt.Color(255, 255, 255));
        btnAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos/previous2.png"))); // NOI18N
        btnAnterior.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(0, 0, 0), null));
        btnAnterior.setBorderPainted(false);
        btnAnterior.setContentAreaFilled(false);
        btnAnterior.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAnterior.setMaximumSize(new java.awt.Dimension(60, 60));
        btnAnterior.setMinimumSize(new java.awt.Dimension(60, 60));
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });
        jPanel1.add(btnAnterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 60, 60));

        btnEncabezado.setBackground(new java.awt.Color(255, 255, 255));
        btnEncabezado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEncabezado.setForeground(new java.awt.Color(21, 67, 96));
        btnEncabezado.setText("SIG");
        btnEncabezado.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(26, 82, 118), null));
        btnEncabezado.setContentAreaFilled(false);
        btnEncabezado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEncabezado.setMaximumSize(new java.awt.Dimension(60, 60));
        btnEncabezado.setMinimumSize(new java.awt.Dimension(60, 60));
        btnEncabezado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncabezadoActionPerformed(evt);
            }
        });
        jPanel1.add(btnEncabezado, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 622, 60));

        btnSiguiente.setBackground(new java.awt.Color(255, 255, 255));
        btnSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos/next2.png"))); // NOI18N
        btnSiguiente.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(0, 0, 0), null));
        btnSiguiente.setBorderPainted(false);
        btnSiguiente.setContentAreaFilled(false);
        btnSiguiente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSiguiente.setMaximumSize(new java.awt.Dimension(60, 60));
        btnSiguiente.setMinimumSize(new java.awt.Dimension(60, 60));
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });
        jPanel1.add(btnSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 50, 60, 60));

        tblHorarioSemanalR.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblHorarioSemanalR.setForeground(new java.awt.Color(21, 67, 96));
        tblHorarioSemanalR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHorarioSemanalR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblHorarioSemanalR.setEnabled(true);
        tblHorarioSemanalR.setGridColor(new java.awt.Color(21, 67, 96));
        tblHorarioSemanalR.setSelectionBackground(new java.awt.Color(21, 67, 96));
        tblHorarioSemanalR.getTableHeader().setReorderingAllowed(false);
        tblHorarioSemanalR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHorarioSemanalRMouseClicked(evt);
            }
        });
        tblHorarioSemanalR.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tblHorarioSemanalRMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(tblHorarioSemanalR);
        if (tblHorarioSemanalR.getColumnModel().getColumnCount() > 0) {
            tblHorarioSemanalR.getColumnModel().getColumn(0).setResizable(false);
            tblHorarioSemanalR.getColumnModel().getColumn(1).setResizable(false);
            tblHorarioSemanalR.getColumnModel().getColumn(2).setResizable(false);
            tblHorarioSemanalR.getColumnModel().getColumn(3).setResizable(false);
            tblHorarioSemanalR.getColumnModel().getColumn(4).setResizable(false);
            tblHorarioSemanalR.getColumnModel().getColumn(5).setResizable(false);
            tblHorarioSemanalR.getColumnModel().getColumn(6).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 760, 490));

        jPanel2.setBackground(new java.awt.Color(26, 82, 118));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
        });
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos/minimizar.png"))); // NOI18N
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 0, 30, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos/cerrar_1.png"))); // NOI18N
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 0, 30, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Dias no laborales");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, 220, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        Calendar cal =Calendar.getInstance();
        System.out.println("anio-->"+Integer.parseInt(SemFinanio));
        System.out.println("mes-->"+Integer.parseInt(SemFinid_mes));
        System.out.println("dia-->"+Integer.parseInt(SemFindia));
        System.out.println("************************************************");
        cal.set(Integer.parseInt(SemFinanio), Integer.parseInt(SemFinid_mes)-1, Integer.parseInt(SemFindia));
       
        cal.add(Calendar.DAY_OF_YEAR, -7);
        
        SimpleDateFormat sdfa = new SimpleDateFormat("yyyy");
        SimpleDateFormat sdfm = new SimpleDateFormat("MMMM");
        SimpleDateFormat sdfd = new SimpleDateFormat("d");
        this.anio = sdfa.format(cal.getTime());
        this.mes = sdfm.format(cal.getTime());
        this.dia = sdfd.format(cal.getTime());
        id_mes = getIdMes();
        System.out.println("anio-->"+Integer.parseInt(anio));
        System.out.println("mes-->"+Integer.parseInt(id_mes));
        System.out.println("dia-->"+Integer.parseInt(dia));
        //nombreColumnas = new String[]{"Hora", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"};
        nombreColumnas = new String[]{"Hora".toUpperCase(), "Lunes".toUpperCase(), "Martes".toUpperCase(), "Miércoles".toUpperCase(), "Jueves".toUpperCase(), "Viernes".toUpperCase(), "Sábado".toUpperCase()};
        GenerarCalendarioxHoras();
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnEncabezadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncabezadoActionPerformed
        this.dispose();

        new VentanaNulos(this).setVisible(true);
    }//GEN-LAST:event_btnEncabezadoActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        System.out.println("***************btnSiguienteActionPerformed**************");
        Calendar cal =Calendar.getInstance();
        cal.set(Integer.parseInt(SemFinanio), Integer.parseInt(SemFinid_mes)-1, Integer.parseInt(SemFindia));
        System.out.println("SemInianio---"+SemFinanio);
        System.out.println("SemIniid_mes---"+SemFinid_mes);
        System.out.println("SemInidia---"+SemFindia);
        System.out.println("anio---"+anio);
        System.out.println("id_mes---"+id_mes);
        System.out.println("dia---"+dia);
        System.out.println(""+cal.getTime());
        System.out.println("*************************************");
        
        cal.add(Calendar.DAY_OF_YEAR, 7);
        SimpleDateFormat sdfa = new SimpleDateFormat("yyyy");
        SimpleDateFormat sdfm = new SimpleDateFormat("MMMM");
        SimpleDateFormat sdfd = new SimpleDateFormat("d");
        System.out.println(""+cal.getTime());
        
        this.anio = sdfa.format(cal.getTime());
        this.mes = sdfm.format(cal.getTime());
        this.dia = sdfd.format(cal.getTime());
        id_mes = getIdMes();
        System.out.println("anio---"+anio);
        System.out.println("id_mes---"+id_mes);
        System.out.println("dia---"+dia);
        
        
        //nombreColumnas = new String[]{"Hora", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"};
        nombreColumnas = new String[]{"Hora".toUpperCase(), "Lunes".toUpperCase(), "Martes".toUpperCase(), "Miércoles".toUpperCase(), "Jueves".toUpperCase(), "Viernes".toUpperCase(), "Sábado".toUpperCase()};
        GenerarCalendarioxHoras();

    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void tblHorarioSemanalRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHorarioSemanalRMouseClicked

        int filaSeleccionada = tblHorarioSemanalR.getSelectedRow();
        int colaSeleccionada = tblHorarioSemanalR.getSelectedColumn();
        //String fecha = lblFechaSel.getText();
        if(colaSeleccionada > 0){

            //String estado = getDiponibleCelda(paciente,filaSeleccionada, colaSeleccionada);//0--> disp, 1 --> ocu, 2-->con el paciente
            String dat = getDatosCelda(filaSeleccionada, colaSeleccionada);
            String[] datos = dat.split("<>");
            if(datos.length>0){
                System.out.println("dat---->"+dat);
                if(datos[0].equals("0")){//Quitar
                    boolean del = cita.QuitarDiaNulo(con, datos[1], datos[2]);
                    System.out.println("Quitar");
                    if(del){
                        QuitarListaNulos(datos);
                        tblHorarioSemanalR.setValueAt("", filaSeleccionada, colaSeleccionada);
                    }
                }else{
                    boolean agr = cita.AgregarDiaNulo(con, datos[1], datos[2]);
                    System.out.println("Agregar");
                    if(agr){
                        AgregarListaNulos(datos);
                        tblHorarioSemanalR.setValueAt("NO DISPONIBLE", filaSeleccionada, colaSeleccionada);
                    }
                }
            }

        }
    }//GEN-LAST:event_tblHorarioSemanalRMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        gsql = new gestorMySQL();
        con = gsql.ConectarConnection();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
        try {
            if (!con.isClosed()) {
                con.close();
            } else {
            }
        } catch (SQLException ex) {
            String mensaje = "Error al tratar de cerrar la conexión.\n"
                    + "___________________________________________________________________\n" + ex.getMessage();
            
        }
    }//GEN-LAST:event_formWindowClosed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        this.setState(VentanaDiasNulos.ICONIFIED);
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_jPanel2MousePressed

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        this.setLocation(this.getLocation().x + evt.getX()-x, this.getLocation().y + evt.getY()-y);
    }//GEN-LAST:event_jPanel2MouseDragged

    private void tblHorarioSemanalRMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHorarioSemanalRMouseMoved
        int fila = tblHorarioSemanalR.rowAtPoint(evt.getPoint());
        int columna = tblHorarioSemanalR.columnAtPoint(evt.getPoint());
        //System.out.println("tblHorarioSemanalRMouseMoved---->"+fila);
        
        if (fila > -1) {
            //se quitan todas las selecciones
            tblHorarioSemanalR.clearSelection();
            
            tblHorarioSemanalR.setSelectionBackground(Color.green);
            tblHorarioSemanalR.setRowSelectionInterval(fila, fila);            
            
            String dia =  ""+nombreColumnas[columna];
            String hora = ""+tblHorarioSemanalR.getModel().getValueAt(fila, 0);
            String html = "<html><head></head><body style='background:#ffffff; border:none; margin:0; padding: 0 5px;'><p>" + dia + "<br>"+hora+"</p></body></html>";
            tblHorarioSemanalR.setToolTipText(""+html);
            
        } else {
            tblHorarioSemanalR.setSelectionBackground(Color.white); 
        }
        
    }//GEN-LAST:event_tblHorarioSemanalRMouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaDiasNulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaDiasNulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaDiasNulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaDiasNulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaDiasNulos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnEncabezado;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHorarioSemanalR;
    // End of variables declaration//GEN-END:variables

    public void GenerarCalendarioxHoras(){
        try{
            
            String Enc = getEncabezado();
            ListaCitaAux = new ArrayList<>();
            ListaNuloAux = new ArrayList<>();
            
            btnEncabezado.setText(Enc);
            
            Calendar cal =Calendar.getInstance();            
            cal.set(Integer.parseInt(SemInianio), Integer.parseInt(SemIniid_mes)-1, Integer.parseInt(SemInidia));
            
            SimpleDateFormat sdfd = new SimpleDateFormat("d");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            
            for(int i = 1; i <= 6; i++){
                String dia  = sdfd.format(cal.getTime());
                infDiasS[i-1] = sdf.format(cal.getTime());
                nombreColumnas[i] += " "+dia;
                cal.add(Calendar.DAY_OF_MONTH, 1);
            }
            modelo = new DefaultTableModel(nombreColumnas, 0);
            
            tblHorarioSemanalR.setModel(modelo);
            
            DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
            tcr.setHorizontalAlignment(SwingConstants.CENTER);
            
//            DefaultTableCellHeaderRenderer thcr = new DefaultTableCellHeaderRenderer();
//            tcr.setHorizontalAlignment(SwingConstants.CENTER);

            
            tblHorarioSemanalR.getColumnModel().getColumn(0).setPreferredWidth(40);
            for(int i = 0; i < modelo.getColumnCount(); i++){                
                tblHorarioSemanalR.getColumnModel().getColumn(i).setResizable(false);
                tblHorarioSemanalR.getColumnModel().getColumn(i).setCellRenderer(tcr);
//                tblHorarioSemanalR.getColumnModel().getColumn(i).setHeaderRenderer(thcr);
            }
            JTableHeader header = tblHorarioSemanalR.getTableHeader();
            ((DefaultTableCellRenderer)header.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
            
            tblHorarioSemanalR.getTableHeader().addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e){
                    int clicks = e.getClickCount();
                    int v = 0;
                    int sum = 0;
                    int tam_horas = horasTabla.length;
                    System.out.println("CLICKS--->"+clicks);
                    System.out.println("bandera--->"+bandera);
                    if(bandera == 0){
                        //bandera = 1;
                        v = tblHorarioSemanalR.columnAtPoint(e.getPoint());
                        if(v > 0){
                            sum = getSumaNoDisponibles(v);  
                            System.out.println("suma---->"+sum);
                            if(sum > tam_horas/2 + 1){//QUITAR NO DISPONIBLES
                                if(cita.QuitarDiasNulos(infDiasS[v-1], horasTabla)){
                                    //QUITO NO DISPONIBLE DE LA TABLA
                                    System.out.println("QUITAR  ListaNuloAux--->"+ListaNuloAux.size());
                                    for(int i = 0; i < horasTabla.length; i++){
                                        tblHorarioSemanalR.setValueAt("", i, v);
                                    }
                                    ListaNuloAux.clear();
                                }else{

                                }                                
                            }else{//INGRESAR
                                if(cita.InsertarDiasNulos(infDiasS[v-1], horasTabla, "")){
                                    ///COLOCAR NO DISPONIBLE EN LA TABLA
                                    ListaNuloAux.clear();
                                    for(int i = 0; i < horasTabla.length; i++){
                                        tblHorarioSemanalR.setValueAt("NO DISPONIBLE", i, v);
                                        ListaNuloAux.add(new String[]{""+i, ""+v, infDiasS[v-1], horasTabla[i]});
                                    }
                                    System.out.println("INGRESAR  ListaNuloAux--->"+ListaNuloAux.size());
                                }else{

                                }
                            }
                        }
//                        
//                        System.out.println("columna Seleccionada------------->"+v+"//");
//                        System.out.println("dia semana--->"+infDiasS[v-1]);
//                        
//                        String dato = ""+tblHorarioSemanalR.getValueAt(0, v);
//                        System.out.println("dato--->"+dato);
//                        for(int i = 0; i < horasTabla.length; i++){
//                            System.out.println("HORA["+i+"]-->"+horasTabla[i]+"///");
//                        }
//                        if(clicks == 1){//INSERTAR
//                            System.out.println("INSERTOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO");
//                            if(cita.InsertarDiasNulos(infDiasS[v-1], horasTabla, "")){
//                                ///COLOCAR NO DISPONIBLE EN LA TABLA
//                                
//                                for(int i = 0; i < horasTabla.length; i++){
//                                    tblHorarioSemanalR.setValueAt("NO DISPONIBLE", i, v);
//                                }
//                            }else{
//                                
//                            }
//                            
//                        }else if(clicks == 2){//QUITAR
//                            System.out.println("QUITOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO");
//                            if(cita.QuitarDiasNulos(infDiasS[v-1], horasTabla)){
//                                //QUITO NO DISPONIBLE DE LA TABLA
//                                for(int i = 0; i < horasTabla.length; i++){
//                                    tblHorarioSemanalR.setValueAt("NO DISPONIBLE", i, v);
//                                }
//                            }else{
//                                
//                            }
//                        }
                    }else{
                        bandera = 0;
                    }
                        
                    
                } 

                
            });
            
            Lista_Calendario = cita.getCitasSemanales(SemInianio+"-"+SemIniid_mes+"-"+SemInidia, SemFinanio+"-"+SemFinid_mes+"-"+SemFindia);
            ArrayList<String[]> Lista_DNulo = cita.getDiasNulos(SemInianio+"-"+SemIniid_mes+"-"+SemInidia, SemFinanio+"-"+SemFinid_mes+"-"+SemFindia);
            
            //CONTENIDO
            int minAu = 20;
            int hora = 7;
            int min = 0;
            
            //for(int i = 0; i < 13; i ++){
            String HoraDig = "";
            int i = 0, fil = -1;
            String[] datos;
            int sum = 0;
            while(i < 13){
                datos = new String[] {"", "", "", "", "", "", ""};
                fil++;
                if(min==60){
                    i++;
                    hora +=1; 
                    min = 0;
                }
                HoraDig = (String.valueOf(hora).length() == 1?"0"+hora:hora)+":"+(String .valueOf(min).length()==1?"0"+min:min);
                datos[0] = getHora(HoraDig);
               
                horasTabla[fil] = HoraDig;
                
                for(int j = 0; j < infDiasS.length; j++){
                    String nulo = getDiaNulo(Lista_DNulo, HoraDig, infDiasS[j]);
                    if(nulo.equals("")){
                        String ocupado = getPaciente(Lista_Calendario,HoraDig, infDiasS[j]);
                        //String[] pac = getPaciente(Lista_Calendario,HoraDig, infDiasS[j]);
                        datos[j+1] = ocupado;    
                        ListaCitaAux.add(new String[]{""+fil, ""+(j+1), infDiasS[j], HoraDig});
                    }else{
                        sum++;
                        System.out.println("********************DIAS NULOS**************"+sum+"************");
                        datos[j+1] = nulo;                    
                        ListaNuloAux.add(new String[]{""+fil, ""+(j+1), infDiasS[j], HoraDig});
                    }                 
                }
                             
                agregarFila(datos);                
                min += minAu;
            }
            System.out.println("ListaCitaAux--->"+ListaCitaAux.size());
            System.out.println("ListaNuloAux--->"+ListaNuloAux.size());
            System.out.println("Filas-->"+(fil+1));
            
        }catch(Exception e){
            System.out.println("ERROR GenerarCalendarioxHoras--> "+e.toString());
        }
    }
    
    private int getSumaNoDisponibles(int col) {
        int suma = 0;
        for(int i = 0; i < horasTabla.length; i++){
            if(tblHorarioSemanalR.getValueAt(i, col).equals("NO DISPONIBLE")){
                suma++;
            }
        }
        
        return suma;
    }
    
    public String getHora(String hora){
        try{
            String[] dat = hora.split(":");
            int h = Integer.parseInt(dat[0]);
            int  b= 0;
            
            if(h >= 12){
                b = 1;
                if(h>12)
                    h = h-12;
            }
            
            return h+":"+dat[1]+" "+(b==0?"a.":"p.")+" m.";
            
        }catch(Exception e){
            System.out.println("ERROR--getHora--"+e.toString());
            return "";
        }
    }
    
    private void agregarFila(String[] fila) {
        modelo.addRow(fila);
        
    }

    private String getEncabezado() {
        String retorno = "";
        try{
            System.out.println("*******************getEncabezado***************");
            SimpleDateFormat sdfnd = new SimpleDateFormat("EEEE");
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            
            SimpleDateFormat sdfai = new SimpleDateFormat("yyyy");
            SimpleDateFormat sdfidmi = new SimpleDateFormat("M");
            SimpleDateFormat sdfmi = new SimpleDateFormat("MMMM");
            SimpleDateFormat sdfdi = new SimpleDateFormat("d");
            
            Calendar cal =Calendar.getInstance();          
            
            cal.set(Integer.parseInt(anio), Integer.parseInt(id_mes)-1, Integer.parseInt(dia));
            
            Calendar calIni = Calendar.getInstance();
            calIni.set(Integer.parseInt(anio), Integer.parseInt(id_mes)-1, Integer.parseInt(dia));
            Calendar calFin = Calendar.getInstance();
            calFin.set(Integer.parseInt(anio), Integer.parseInt(id_mes)-1, Integer.parseInt(dia));
            
            int diaenSem = getDiaSemana(sdfnd.format(cal.getTime()));
            
            System.out.println("dia-->"+diaenSem);
            int ini = 0;
            int fin = 0;
            
            ini = diaenSem - 1;                 
            fin = 7 - diaenSem;
                                  
            calIni.add(Calendar.DAY_OF_MONTH, -ini);
            calFin.add(Calendar.DAY_OF_MONTH, fin);
            
            SemInianio = sdfai.format(calIni.getTime());
            SemIniid_mes = sdfidmi.format(calIni.getTime());
            SemInimes = sdfmi.format(calIni.getTime());
            SemInidia = sdfdi.format(calIni.getTime());
            
            SemFinanio = sdfai.format(calFin.getTime());
            SemFinid_mes = sdfidmi.format(calFin.getTime());
            SemFinmes = sdfmi.format(calFin.getTime());
            SemFindia = sdfdi.format(calFin.getTime());
            
            retorno = "Semana del ";
            if(SemIniid_mes.equals(SemFinid_mes)){
                retorno = SemInidia+" al "+SemFindia+" de "+SemInimes+" del "+SemInianio;
            }else if(!SemIniid_mes.equals(SemFinid_mes) && SemInianio.equals(SemFinanio)){
                retorno = SemInidia+" de "+SemInimes+" al "+SemFindia+" de "+SemFinmes+" del "+SemInianio;
            }else if(!SemIniid_mes.equals(SemFinid_mes) && !SemInianio.equals(SemFinanio)){
                retorno = SemInidia+" de "+SemInimes+" del "+SemInianio+" al "+SemFindia+" de "+SemFinmes+" del "+SemFinanio;
            }                      
            
        }catch(Exception e){
            System.out.println("ERROR-getEncabezado->"+e.toString());
            
        }
        return retorno.toUpperCase();
    }
    private String getIdMes() {
        String ret = "";
        for(int  i = 0; i < Meses.length; i++){
            if(Meses[i].equalsIgnoreCase(mes)){
                ret = ""+(i+1);
                break;
            }
        }
        return ret;
    }

    private int getDiaSemana(String dato) {
        int ret = 0;
        for(int  i = 0; i < dias.length; i++){
            if(dias[i].equalsIgnoreCase(dato)){
                ret = (i+1);
                break;
            }
        }
        return ret;
    }

        private String getPaciente(ArrayList<Cita> Lista_Calendario, String hora, String fecha) {
        try{
            String ret = "";
            //System.out.println("*******************getPaciente******"+Lista_Calendario.size()+"******"+hora+"*****"+fecha+"**");
            for(int i = 0; i < Lista_Calendario.size(); i++){
                if(Lista_Calendario.get(i).getFecha().equals(fecha) && Lista_Calendario.get(i).getHora().equals(hora)){
                    ret = "OCUPADO";
                    break;
                }
            }
            //System.out.println("****************END   //"+ret+"// ********************");
            return ret;
        }catch(Exception e){
            return "";
        }
    }

    private String getDiaNulo(ArrayList<String[]> Lista_DNulo, String hora, String fecha) {
        try{
            String ret = "";
            for(int i = 0; i < Lista_DNulo.size(); i++){
                if(Lista_DNulo.get(i)[0].equals(fecha) && Lista_DNulo.get(i)[1].equals(hora)){
                    ret = "NO DISPONIBLE";
                    break;
                }
            }
            return ret;
        }catch(Exception e){
            return "";
        }
    }

    private String getDatosCelda(int fila, int col) {
        try{
            System.out.println("*****************getDatosCelda*******"+fila+"******"+col+"**");
            String ret = "", dat ="";
            String[] info = null;
            System.out.println("listanolos-->"+ListaNuloAux.size());
            for(int i = 0; i < ListaNuloAux.size(); i++){
                info = ListaNuloAux.get(i);   
                System.out.println("**************"+i+"********fil**"+fila+"****col**"+col+"******");
                System.out.println("--->"+info[0]);
                System.out.println("--->"+info[1]);
                System.out.println("--->"+info[2]);
                System.out.println("--->"+info[3]);
                
                if(info[0].equals(""+fila) && info[1].equals(""+col)){
                    System.out.println("***********************ENTER*********************");
                    ret = "0<>"+info[2]+"<>"+info[3]+"<>"+info[0]+"<>"+info[1]+"<>END";
                    break;
                }
            }
            System.out.println("ret--->"+ret);
            if(ret.equals("")){
                for(int i = 0; i < ListaCitaAux.size(); i++){
                    info = ListaCitaAux.get(i); // 0-->pac, 1-->fila, 2-->col, 3--> IdCita   
                    dat = ""+tblHorarioSemanalR.getValueAt(fila, col);
                    if(info[0].equals(""+fila) && info[1].equals(""+col)){
                        ret = "1<>"+info[2]+"<>"+info[3]+"<>"+info[0]+"<>"+info[1]+"<>END";
                    }
                }    
            }
            return ret;
        }catch(Exception e){
            System.out.println("ERROR --getCeldaDisponible-- "+e.toString());
            return "";
        }
    }

    private void QuitarListaNulos(String[] datos) {
        for(int i = 0; i < ListaNuloAux.size(); i++){
            if(ListaNuloAux.get(i)[0].equals(datos[3]) && ListaNuloAux.get(i)[1].equals(datos[4])){
                ListaNuloAux.remove(i);
                break;
            }
        }
    }

    private void AgregarListaNulos(String[] datos) {
        ListaNuloAux.add(new String[]{datos[3], datos[4], datos[1], datos[2]});
    }

}
